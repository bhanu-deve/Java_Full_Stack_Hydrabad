How to convert decimal to binary number 
=======================================

	10 - decimal number 
	1010 - binary number 

	2|10
         ---- 0
	2|5
         ---- 1
	2|2
	 ---- 0		^
          1		|
	-----------------
	1010	


How to convert binary to decimal number 
====================================

	1010 - binary number 
	10 - decimal number 
	
	1010 <----

	0*1 + 1*2 + 0*4 + 1*8

	0 + 2 + 0 + 8 = 10 
	
4) Bitwise operators 
=====================

Bitwise AND operator (&)
------------------------
Bitwise AND operator deals with binary numbers.

Truth table
-----------
T	T	= T
T	F	= F 
F	T	= F 
F	F	= F 

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		
		int c = a & b;
		
		System.out.println(c); // 10
	}
}
/*
	 10 - 1010
	 15 - 1111
	 -----------
	 &  - 1010
*/

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int a=5,b=15;
		
		int c = a & b;
		
		System.out.println(c); // 5
	}
}
/*
	 5  - 0101
	 15 - 1111
	 ---------
	 &  - 0101 <----
	 
	 1*1 + 0*2 + 1*4 + 0*8 
	 
	 1 + 0 + 4 + 0 = 5 
*/

Bitwise OR operator (|)
-----------------------
Bitwise OR operator deals with binary numbers.

Truth table
----------
T	T	= T
T	F	= T
F	T	= T
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=5,b=15;
		
		int c = a | b;
		
		System.out.println(c); // 15
	}
}
/*
	 5  - 0101
	 15 - 1111
	 ---------
	 |  - 1111
*/

Bitwise XOR operator (^)
-------------------------
Bitwise XOR operator deals with binary numbers.

Truth table 
----------
T	T	= F 
T	F	= T
F	T	= T 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		
		int c = a ^ b;
		
		System.out.println(c); // 5
	}
}
/*
	 10 - 1010
	 15 - 1111
	 ----------
	 ^  - 0101
*/

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=5,b=10;
		
		int c = a ^ b;
		
		System.out.println(c); // 15
	}
}
/*
	 5  - 0101
	 10 - 1010
	 ---------
	 ^  - 1111
*/

Bitwise NOT operator (~)
------------------------
syntax
------
	-(n+1)

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = ~10;
	
		System.out.println(i); // -11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = ~(-10);
	
		System.out.println(i); // 9
	}
}

Q) Write a java program to find out given number is even or odd?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n = sc.nextInt();
		
		String str = ((n&1)==0)?"It is even number":"It is odd number";
		
		System.out.println(str); 
	}
}

5) Arithmetic operators 
=======================
% - modules 
/ - division 
* - multiplication 
+ - addition 
- - subtraction 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 6+10%2+10%15+6/2+6/10+4*2+10-30;
		System.out.println(i); 
	}
}
/*
	6 + 10%2 + 10%15 + 6/2 + 6/10 + 4*2 + 10 - 30
	
	6 + 0 + 10 +  3 + 0 + 8 + 10 - 30
	
	37 - 30 
	
	7
*/



Q) Write a java program to find out given number is even or odd?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		 Scanner sc = new Scanner(System.in);
		 
		 System.out.println("Enter the number :");
		 int n = sc.nextInt();
		 
		 String str = (n%2==0)?"It is a even number":"It is odd number";
		 
		 System.out.println(str);
	}
}

6) Relational operators 
========================

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 > 20); // false 
		
		System.out.println(10 >= 20); // false 
		
		System.out.println(10 < 20); // true 
		
		System.out.println(10 <= 10); // true 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 == 10); // true 
		
		System.out.println(10 == 20); // false 
		
		System.out.println(10 != 20); // true 
		
		System.out.println(10 != 10); // false
	}
}

7) Shift operators 
====================

Right Shift operators (>>)
--------------------------
10 >> 1  =  10/2

10 >> 2  =  10/4

10 >> 3  =  10/8

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10 >> 4;
		
		System.out.println(i); // 10/16 = 0
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 100 >> 6;
		
		System.out.println(i); // 100 / 64 = 1
	}
}

Left shift operators (<<)
-------------------------
10 << 1  =  10 * 2

10 << 2  =  10 * 4

10 << 3  =  10 * 8

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 100 << 5;
		
		System.out.println(i); // 100 * 32 = 3200
	}
}

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10 << 4;
		
		System.out.println(i); // 10 * 16 = 160
	}
}

8) Unary operators 
==================

Increment/Decrement (++/--)
---------------------------
We have two types of increment operators.

1) post increment 
	ex:
		i++

2) pre increment 
	ex:
		++i

We have two types of decrement operators.

1) post decrement
	ex:
		i--

2) pre decrement 
	ex:
		--i


Post Increment/Decrement operators 
----------------------------------
Rule1: First Take 
Rule2: Then Change 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i++;
		
		System.out.println(i); // 11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		System.out.println(i++); // 10
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		int j = i++;
		
		System.out.println(i+" "+j); // 11  10
	}
}













