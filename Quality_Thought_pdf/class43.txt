Serialization 
=============
The process of storing object data into a file is called serialization.

Converting object state to file state is called serialization.

To perform serialization we required ObjectOutputStream and FileOutputStream class.

We can perform serialization only for serialized objects.

To create a serialized object a class must implements Serializable interface.

Diagram: class43.1

ex:
---
import java.io.*;
class Person implements Serializable
{
	private int age;
	private String name;
	
	Person(int age,String name)
	{
		this.age=age;
		this.name=name;
	}
	public String toString()
	{
		return age+" "+name;
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		
		Person p = new Person(29,"Alan");
		
		try(ObjectOutputStream ostream=new 
			ObjectOutputStream(new FileOutputStream("abc.ser"));)
		{
			ostream.writeObject(p);
			
			System.out.println("Serialization Done");
		}
		catch (IOException ioe)
		{
			ioe.printStackTrace();
		}
	}
}

transient 
==========
A transient means "not serialized".

If we don't want to perform serialization on perticular variable then we need to declare that variable as transient. But JVM will store that variable with default value.

ex:
---
import java.io.*;
class Person implements Serializable
{
	private int age;
	private String name;
	transient private String address;
	
	Person(int age,String name,String address)
	{
		this.age=age;
		this.name=name;
		this.address=address;
	}
	public String toString()
	{
		return age+" "+name+" "+address;
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		
		Person p = new Person(29,"Alan","hyd");
		
		try(ObjectOutputStream ostream=new 
			ObjectOutputStream(new FileOutputStream("abc.ser"));)
		{
			ostream.writeObject(p);
			
			System.out.println("Serialization Done");
		}
		catch (IOException ioe)
		{
			ioe.printStackTrace();
		}
	}
}

Deserialization 
================
The process of taking the data from a file and representing an object is called deserialization.

Converting file state to object state is called deserialization.

To perform deserialization we required ObjectInputStream and FileInputStream class.

We can perform deserialization only for serialized objects.

To create a serialized object our class must implements Serializable interface.

Diagram: class43.2

ex:
---
import java.io.*;
class Person implements Serializable
{
	private int age;
	private String name;
	transient private String address;
	
	Person(int age,String name,String address)
	{
		this.age=age;
		this.name=name;
		this.address=address;
	}
	public String toString()
	{
		return age+" "+name+" "+address;
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		
		try(ObjectInputStream istream=new 
			ObjectInputStream(new FileInputStream("abc.ser"));)
		{
			Person person=(Person)istream.readObject();
			System.out.println(person);
		}
		catch (IOException | ClassNotFoundException e)
		{
			e.printStackTrace();
		}
	}
}


Generics 
=========
Arrays are typesafe. 

It means we can give guarantee that what type of elements are present in array.
ex:
	int[] arr = new int[3];
	arr[0]=10;
	arr[2]=20;
	arr[3]=30;

If requirement is there to store String values then it is recommanded to use String[].

ex:
	String[] sarr = new String[3];
	sarr[0]="hi"
	sarr[1]="hello";
	sarr[2]="bye";

At the time of retrieving the data from array we don't need to perform typecasting.	

ex:
	String[] sarr = new String[3];
	sarr[0]="hi"
	sarr[1]="hello";
	sarr[2]="bye";
	-
	-
	-
	String val = sarr[0];


Collections are not typesafe.

It means we can't give guarantee that what type of elements are present in Collections.

Suppose if requirement is there to store String values then it is never recommanded to use ArrayList because we won't get any compile time error or runtime error but sometimes our program get failure.

ex:
	ArrayList al = new ArrayList();
	al.add("hi");
	al.add("bye");
	al.add(10);

At the time of retrieving the data compulsary we need to perform typecasting.

ex:
	ArrayList al = new ArrayList();
	al.add("hi");
	al.add("bye");
	al.add(10);
	-
	-
	String value = (String) al.get(0);

To overcome above limitations Sun Micro System introduced Generics concept in 1.5 version.

The main objective of Generics are 

1) To make Collection as typesafe.

2) To avoid typecasting problem.


java.util package
==================

Q) What is the difference between Arrays and Collections?

Arrays						Collections
-----------					-------------
It is a collection of homogeneous 		It is a collection of homogeneous and 
data elements.					hetrogeneous data elements.

It is fixed in size.				It is growable in nature.

Performance point of view arrays are 		Memory point of view Collections are 
recommanded to use.				recommanded to use.

It can holds primitive types and object types.	It can holds only object types.

Arrays not implemented based on data structure 	Collections are implemented based on data 
concept so we can't expect any ready made 	structure concept so we can expect ready 
methods.					made methods.

Collection Framework 
====================
Collection framework defines several utility classes and interface to represent group of objects in a single entity.

ex:
	Java			C++
	-----			------
	Collection		Containers 
	Collection Framework	STL (Standard Template Library)


Collection 
===========
Collection is an interface which is present in java.util package.

It is a root interface for entire collection framework.

If we want to represent group of individual objects in a single entity then we need to use Collection.

Collection interface contains some common methods which are available for entire Collection objects.

ex:
	cmd> javap   java.util.Collection 

	public abstract int size();
  	public abstract boolean isEmpty();
  	public abstract boolean contains(java.lang.Object);
  	public abstract java.util.Iterator<E> iterator();
  	public abstract java.lang.Object[] toArray();
  	public abstract <T> T[] toArray(T[]);
  	public default <T> T[] toArray(java.util.function.IntFunction<T[]>);
  	public abstract boolean add(E);
  	public abstract boolean remove(java.lang.Object);
  	public abstract boolean containsAll(java.util.Collection<?>);
  	public abstract boolean addAll(java.util.Collection<? extends E>);
  	public abstract boolean removeAll(java.util.Collection<?>);
  	public default boolean removeIf(java.util.function.Predicate<? super E>);
  	public abstract boolean retainAll(java.util.Collection<?>);
  	public abstract void clear();
	and etc.


List 
=====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects are allowed and order is preserved then we need to use List interface.

Diagram: class43.3


ArrayList 
=========
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and RandomAccess interface.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al = new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		
		al.add(10);
		System.out.println(al);//[one,two,three,one,10]
		
		al.add(null);
		System.out.println(al);//[one,two,three,one,10,null]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al = new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		
		al.add(null);
		System.out.println(al);//[one,two,three,one,null]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al = new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		al.add(1,"gogo");
		System.out.println(al);//[one,gogo,two,three]
		
		System.out.println(al.isEmpty()); // false 
		
		System.out.println(al.contains("gogo")); // true 
		
		al.remove("gogo");
		System.out.println(al);//[one,two,three]
		
		al.clear();
		System.out.println(al);//[]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al = new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		
		for(int i=0;i<al.size();i++)
		{
			String s =al.get(i);
			System.out.println(s); 
		}
		
	}
}

ex:
---
import java.util.*;

class Student 
{
	private int studId;
	private String studName;
	
	Student(int studId,String studName)
	{
		this.studId=studId;
		this.studName=studName;
	}
	public String toString()
	{
		return studId+" "+studName;
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<Student> al = new ArrayList<Student>();
		al.add(new Student(101,"Alan"));
		al.add(new Student(102,"Kelvin"));
		al.add(new Student(103,"Jose"));
		
		for(int i=0;i<al.size();i++)
		{
			Student s = al.get(i);
			System.out.println(s); 
		}
		
	}
}






































































