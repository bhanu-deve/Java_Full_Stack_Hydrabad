2) static variables
===================
A value of a variable which is not varied from object to object is called static variable.

Static variable will be created at the time of class loading and it will destroy at the time of class unloading. Hence scope of static variable is same as scope of .class file.

Static variable will store in method area.

Static variable must and should declare immediately after the class using static keyword but not inside methods, blocks and constructors.

Static variable we can access directly from instance area as well as static area.

Static variable we can access by using object reference and class name.

ex:1
----
class Test 
{
	//static variable 
	static int i=10;

	public static void main(String[] args)
	{
		System.out.println(i); // 10

		Test t=new Test();
		System.out.println(t.i); // 10

		System.out.println(Test.i); // 10
	}
}

Note:
-----
If we won't initialize any value to static variable then JVM will initialized default values.

ex:2
----
class Test 
{
	//static variable 
	static String s;
	
	public static void main(String[] args)
	{
		System.out.println(s); // null
		
		Test t=new Test();		
		System.out.println(t.s); // null

		System.out.println(Test.s); // null  
	}
}

Here only one copy of static variable will created and it shared to multiple objects.


ex:3
-----
class Test 
{
	//static variable 
	static int i=10;
	
	public static void main(String[] args)
	{
		Test t1=new Test();
		Test t2=new Test(); 

		System.out.println(t1.i); // 10
		System.out.println(t2.i); // 10

		t1.i=100;

		System.out.println(t1.i); // 100
		System.out.println(t2.i); // 100
	}
}

ex:4
------
class Test 
{
	public static void main(String[] args)
	{
		methodOne();

		Test t=new Test();
		t.methodOne();

		Test.methodOne();
	}
	//static method 
	public static void methodOne()
	{
		System.out.println("static-method");	
	}
}

3) local variable
------------------
To meet temperory requirements a programmer will declare some variables inside methods, blocks and constructors such type of variables are called local variables.

Local variable will be created at the time of execution block and it will destroy when execution block is executed. Hence scope of local variable is same as scope of execution block where it is declared.

Local variables will store in java stack.


ex:1
-----
class Test 
{
	public static void main(String[] args)
	{
		//local variable 
		int i=10;

		System.out.println(i);
	}
}

Note:
------
If we won't initialize any value to local variable then JVM will not initialized any value.

ex:2
----
class Test 
{
	public static void main(String[] args)
	{
		//local variable 
		int i;

		System.out.println(i);
	}
}


o/p:
	C.T.E : variable i might not have been initialized

A local variable will accept only one modifier i.e final.

ex:3
----
class Test 
{
	public static void main(String[] args)
	{
		//local variable 
		final int i=10;

		System.out.println(i);
	}
}


Interview Question
===================

Q) What is literal ?

A value which is assigned to a variable is called literal.

A value which is not change during the program execution is called literal.

ex:
	int  i = 10;
         |   |   |______ value of a variable / literal 
	 |   |__________ variable name / identifier 
	 |______________ datatype / keyword 


Q) Write a java program to perform sum of two numbers?

class Test 
{
	//static variables
	static int a=10,b=20;
	public static void main(String[] args)
	{
		//calling 
		sum();
	}
	//static method 
	public static void sum()
	{
		int c = a + b;
		System.out.println(c); // 30
	}
}

Assignment 
==========
1) Write a java program to perform area of a triangle?

2) Write a java program to perform cube of a given number?

































































	
































































