Identifiers 
============
A name in java is called identifier.

It can be variable name, method name , class name or label name.

ex:
	class Test
	{	
		public static void main(String[] args)
		{
			int x = 10;
				
			System.out.println(x); 
		}
	}
	Here Test, main, args and x are identifiers.

Rules to declare an identifiers
-------------------------------
Rule1:
------
	Identifier will accept following characters.
	ex:
		A-Z
		a-z
		0-9
		_
		$

Rule2:
-----
	If we take other characters then we will get compile time error.
	ex:
		int emp_id;
		double emp$alary;
		long dept#No; //invalid 

Rule3:
-----
	Every identifier must and should starts with alphabet, underscore or dollar symbol
	but not with digit.
	ex:
		int empId1;
		int _empId; 
		int $=20; 
		int 1empId; //invalid  


Rule4:
-----
	We can't take reserved words as an identifier name.
	ex:
		int  if; //invalid 
		int  else; //invalid 
		int  do; //invalid 

Rule5:
------
	Every identifier is a case sensitive.
	ex:
		int number;
		int NUMBER;
		int NuMbEr; 

Rule6:
------
	There is no length limit for an identifier but it is not recommanded to 
	take more then 15 characters.


Reserved Words 
==============
There are some identifiers which are reserved to associate some functionality or meaning such type of identifiers are called reserved words.

Java supports 53 reserved words.

It is classified into two types.

Diagram: class5.1

Used keywords with respect to class
--------------------------------
package
import
enum
interface
class 
extends 
implements 


Used keywords with respect to object
-----------------------------
new 
instanceof
this
super 

Used keywords with respect to datatypes
--------------------------------
byte
short
int
long
float
double
boolean
char 

Used keywords with respect to modifiers
-----------------------------------
public 
private 
protected
static
final
abstract 
synchronized
strictfp
transient
volatile
native

Used keywords with respect to returntype 
-----------------------------------
void 

Used keywords with respect to flow control
----------------------------------
if
else
do
while
for
break
continue
default
switch
case 
return 

Used keywords with respect to exception handling 
---------------------------------------
try 
catch
throw
throws
finally
assert 


Internal Architecture of JVM 
=============================
Diagram: class5.2

Java application contains java code instructions. Once if we compiled our java code instructions convert to byte code instructions in .class file. 

JVM will invoke one module called classloader or sub system to load all the byte code instructions from .class file. The work of classloader is to check these byte code instructions are proper or not. If they are proper then it will allocates the memory . If  they are not proper then it will refuse the execution.

We have five memories in java.

1) Method Area
--------------
It contains code of a class, code of a variable and code of a method.
 
2) Heap 
-----------
Our object creations will store in heap area.

3) Java Stack 
-------------
Java methods store in method area. But to execute those methods we required some memory and 
that memory will be allocated in java stack.

4) PC Register 
---------------
It is a program counter register which is used to track the address of an instructions.

5) Native Method Stack 
-----------------------
Java methods execute in method area.
Similary native methods execute in native method stack.
But to execute native methods we required a program called Native method interface.

Execution Engine 
------------------
Execution engine contains interpreter and JIT compiler.

Whenever JVM is loading the byte code instructions from .class file. It simultenously uses interpreter and JIT compiler.

Interpreter is used to execute our program line by line procedure.

JIT compiler is used to increase the execution speed of our program.

Finally, JVM will convert byte code to machine code.

Interview Questions 
====================
Q) How many memories are there in java?

We have five memories in java.

1) Method Area 
2) Heap 
3) Java Stack 
4) PC Register 
5) Native Method Stack   


Q) What is Native method in java?

A method which is developed by using some other language is called native method.


Q) What is JIT compiler?

JIT compiler is a part of a JVM which is used to increase the execution speed of our program.


Q) How many classloaders are there in java?

We have three predefined classloaders in java.

1) Bootstrap classloader 

2) Extension classloader 

3) Application/System classloader 





































































































