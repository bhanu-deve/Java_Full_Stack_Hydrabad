Abstraction Example
===================
abstract class Animal 
{
	//abstract method 
	public abstract void sound();
}
class Dog extends Animal 
{
	@Override
	public void sound()
	{
		System.out.println("Bow Bow");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Dog d = new Dog();
		d.sound();
	}
}

Abstract class example
======================
abstract class Plan 
{
	//instance variable 
	protected double rate;
	
	//abstract method 
	public abstract void getRate();
	
	//concrete method 
	public void calculateBillAmt(int units)
	{
		System.out.println("Total Units :"+units);
		System.out.println("Total Bill : "+ (units*rate));
	}
}
class DomesticPlan extends Plan 
{
	public void getRate()
	{
		rate = 2.5d;
	}
}
class CommercialPlan extends Plan 
{
	public void getRate()
	{
		rate = 5.0d;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		DomesticPlan dp = new DomesticPlan();
		dp.getRate();
		dp.calculateBillAmt(250);
		
		CommercialPlan cp = new CommercialPlan();
		cp.getRate();
		cp.calculateBillAmt(250);
	}
}

Q)  What is the difference between interface and abstract class?

interface					abstract class
---------					--------------
To declare interface we will use interface	To declare abstract class we will use 
keyword.					abstract keyword.

It is a blue print of a class and it is a 	It is a collection of abstract methods 
collection of abstract methods, default 	and concrete methods.
methods and static methods.

It contains constants.				It contains instance variables.

We can achieve multiple inheritance.		We can't achieve multiple inheritance.

It does not allow constructors.			It allows constructors.

It does not allow blocks.			It allows blocks.

To write the implementation for abstract 	To write the implementation for abstract
methods we will use implementation class.	methods we will use sub class.

If we know specification then we need 		If we know partial implementation then we need
to use interface.				to use abstract class.


Packages 
========
A package is a collection of classes, interfaces, enums and annotations.

Here enum is a special class and annotation is a special interface.

In general, a package is a collection of classes and interfaces.

A package is also known as folder or a directory.

In java, packages are divided into two types.

1) Predefined packages
----------------------
BuiltIn packages are called predefined packages.
ex:
	java.lang
	java.io
	java.util
	java.util.stream
	java.time 
	java.text 
	java.sql
	javax.servlet 
	and etc. 


2) Userdefined packages
----------------------
Packages which are created by the user based on the application requirements are called userdefined packages.

It is always recommanded to declare a package name in the reverse order of url.

We can declare package as follow.

syntax:
-----
	package <package_name>;

ex:
	package  com.ihub.www;


Program
--------
package com.ihub.www;
import java.util.Calendar;
class Test 
{
	public static void main(String[] args)
	{
		Calendar c = Calendar.getInstance();
		int h = c.get(Calendar.HOUR_OF_DAY);
		
		if(h<12)
			System.out.println("Good Morning");
		else if(h<16)
			System.out.println("Good Afternoon");
		else if(h<20)
			System.out.println("Good Evening");
		else
			System.out.println("Good Night");
	}
}

We can compile above program as follow.
ex:

		current directory 
		     |
	javac   -d   .   Test.java 
		| 
	destination folder 

We can run above program as follow.
ex:
	java   com.ihub.www.Test 
		|	     |
		packagename  classname 


Wrapper classes
================
The main objective of wrapper classe are

1) To wrap primitive type to wrapper object and vice versa.

2) To defined several utility methods. 

ex:
	primitive type		wrapper class
	--------------		-------------
	byte 			Byte 
	short			Short
	int 			Integer
	long 			Long
	float			Float 
	double 			Double 
	boolean 		Boolean 
	char 			Character 

constructor 
-----------
For every wrapper class we can create two objects. One will take corresponding primitive as an argument and another takes corresponding string as an argument.

ex:
	Wrapper class		Constructor 
	-------------		-------------
	Byte			byte or String  
	Short			short or String 
	Integer			int or String 
	Long			long or String 
	Float			float or String 
	Double 			double or String 
	Boolean 		boolean or String 
	Character		char 

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i1 = new Integer(10);	
		System.out.println(i1);
		
		Integer i2 = new Integer("20");
		System.out.println(i2);
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Boolean b1=new Boolean(true);
		System.out.println(b1);
		
		Boolean b2=new Boolean("false");
		System.out.println(b2);
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Character c = new Character('a');
		System.out.println(c);// a 

	}
}

utility methods
===============

1) valueOf() 
------------
It converts primitive type to wrapper object.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		byte b = 10;
		Integer i = Integer.valueOf(b);
		System.out.println(i);
	}
}

Automatic convertion performed by the compiler between primitive type and wrapper object is called autoboxing.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		int a = 10;
		Integer i1 = a;
		System.out.println(i1); // 10
		
		//or 
		
		int b = 20;
		Integer i2 = Integer.valueOf(b);
		System.out.println(i2); // 20 
	}
}


2) xxxValue() 
--------------
It converts wrapper object to primitive types.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i = new Integer(10);
		
		byte b = i.byteValue();	
		System.out.println(b);
		
		short s = i.shortValue();
		System.out.println(s);
		
		int a = i.intValue();
		System.out.println(a);
		

	}
}

Automatic convertion performed by the compiler between wrapper object and primitive types is called autounboxing.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i1 = new Integer(10);
		int a = i1;
		System.out.println(a); // 10

		//or 
		
		Integer i2 = new Integer(10);
		int b = i2.intValue();
		System.out.println(b); // 10
		
	}
}


3) parseXxx()
--------------
It is used to convert string type to primitive type.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		String str="21";
		
		byte b = Byte.parseByte(str);
		System.out.println(b); 
		
		short s = Short.parseShort(str);
		System.out.println(s);
		
		int i = Integer.parseInt(str);
		System.out.println(i);
		
		long l = Long.parseLong(str);
		System.out.println(l);
		
	}
}

ex:
----
class Test 
{
	public static void main(String[] args)
	{
		String str="21.56";
		
		float f = Float.parseFloat(str);
		System.out.println(f); 
		
	}
}


4) toString() 
-------------
It is used to convert wrapper object to String type.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i = new Integer(10);
		
		String str = i.toString();
		
		System.out.println(str); // 10
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		int i = 100;
		
		String str = Integer.toString(i);
		
		System.out.println(str); // 100
	}
}

Q) Write a java program to perform sum of two binary numbers?

input:
	1010
	0101
output:
	1111

ex:
---
import java.util.Scanner;
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the first binary number :");
		String binary1 = sc.next(); // 1010
		
		System.out.println("Enter the second binary number :");
		String binary2 = sc.next(); // 0101
		
		//convert binary to decimal 
		int a = Integer.parseInt(binary1,2); // 10
		int b = Integer.parseInt(binary2,2); // 5
		
		int c = a+b;
		
		//convert decimal to binary number 
		String result = Integer.toBinaryString(c);
		System.out.println(result);
	}
}














