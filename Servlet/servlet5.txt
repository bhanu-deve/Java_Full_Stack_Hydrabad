form.html
---------
<!DOCTYPE html>
<html>
	<head>
		<title>MyPage!</title>	
		
		<!--  add external javascript -->
		<script language="javascript" src="validation.js"></script>	
		
	</head>
	<body>
			<form name="myform" action="test" onsubmit="return validate()">
				
				Name : <input type="text" name="t1"/> <br>
				
				Age : <input type="text" name="t2"/> <br> 
				
				<input type="submit" value="submit"/>
				
			</form>
	</body>
</html>

validation.js 
-------------
function validate()
{
	
	var name = document.myform.t1.value;
	var age = document.myform.t2.value;
	
	if(name=="")
	{
		alert("Name is Mandatory");
		document.myform.t1.focus();
		return false;
	}
	if(age=="")
	{
		alert("Age is Mandatory");
		document.myform.t2.focus();
		return false;
	}
	else
	{
		if(isNaN(age))
		{
			alert("Age must be Numeric");
			document.myform.t2.value="";
			document.myform.t2.focus();
			return false;
		}
	}
	return true;
}


web.xml 
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
 
 	<welcome-file-list>
 		<welcome-file>form.html</welcome-file>
 	</welcome-file-list>
 
</web-app>

Test.java
----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/test")
public class TestSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw = res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name = req.getParameter("t1");
		String sage = req.getParameter("t2");
		int age = Integer.parseInt(sage);
		
		if(age<18)
			pw.println("<center><h1>You are not eligible to vote</h1></center>");
		else
			pw.println("<center><h1>You are eligible to vote </h1></center>");
		
		pw.close();
	}
}

Request url
----------
	http://localhost:2525/ValidationApp/




Servlet Life Cycle Methods 
==========================
We have three servlet life cycle methods.

1) public void init(ServletConfig config)throws ServletException 
----------------------------------
		It is used for instantiation event.
		This method will execute just before servlet object creation.

2) public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException 
----------------------------------
		It is used for request arrival event.
		This method will execute when request goes to servlet program.

3) public void destroy() 
------------------------
		It is used for destruction event.
		This method will execute just before servlet object destruction.

Diagram: servlet5.1


Deployment Directory Structure 
-----------------------------
LifeCycleApp
|
|---Java Resources
		|
		|------src
				|
				|---com.ihub.www
						|
						|---TestSrv.java
|---WebContent
		|
		|---index.html 
		|---WEB-INF
				|
				|---web.xml 
Note:
------
In above application we need to add "servlet-api.jar" file in project build path.



index.html
-----------
<center>
	<h1>
		<a href="test"> click Here </a>		
	</h1>
</center>

web.xml 
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
 
 <welcome-file-list>
 	<welcome-file>index.html</welcome-file>
 </welcome-file-list>
 
</web-app>

TestSrv.java
----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;

@WebServlet("/test")
public class TestSrv extends HttpServlet
{
	public void init(ServletConfig config)throws ServletException
	{
		
	}
	public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw = res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Welcome to Servlets</h1></center>");
		
		pw.close();
	}
	public void destroy()
	{
		
	}
}

Request url
----------
	http://localhost:2525/LifeCycleApp






File Uploading 
===============
The process of taking the file from client machine file system and storing in server machine file system is called file uploading and reverse is called file downloading.

While dealing with matrimonial applications, job portal applications, profile management applications we need to upload and download a file.

There is no specific API in servlets to perform file uploading.

To perform file uploading we need to use JAVAZOOM API.

JAVAZOOM API comes in zip format and once if we extracted we will get three jar files.
ex:
		uploadbean.jar  (main jar file)
		struts.jar      (dependent jar file)
		cos.jar         (dependent jar file)

JAVAZOOM API Link 
------------------
https://drive.google.com/file/d/1XXQqn3rQ_yWTr-i4DT0nl4_nCDE2ejWl/view?usp=drive_link

We can use file component in a form page as follow.
ex:
		File : <input type="file" name="f1"/>

Deployment Directory Structure 
------------------------------
UploadApp
|
|---Java Resources
		|
		|-----src
				|
				|---com.ihub.www
						|
						|---TestSrv.java
|---WebContent
	|
	|---form.html
	|---WEB-INF
			|
			|-----web.xml 
			|-----lib
					|
					|---uploadbean.jar
					|---struts.jar
					|---cos.jar
Note:
-----
In above application we need to add "servlet-api.jar" and "uploadbean.jar" file in project build path.

Copy and paste "javazoom api" jar files inside "WEB-INF/lib" folder seperately.








 





































