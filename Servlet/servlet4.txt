Servlet to Database Communication 
==================================
Diagram: servlet4.1

Deployment Directory Structure 
------------------------------
DBApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---DBSrv.java
|---WebContent
	|
	|---form.html 
	|---WEB-INF
		|
		|------web.xml 
		|------lib
			|
			|---ojdbc14.jar
Note:
-----
In above application we need to add "servlet-api.jar" and "ojdbc14.jar" file in project build path.

Copy and paste "ojdbc14.jar" file inside "WEB-INF/lib" folder seperately.


student table 
==============
drop table student;
create table student(sno number(3),sname varchar2(10),sadd varchar2(12));

form.html 
---------

<form action="test" method="GET">
	
	<table align="center">
		<tr>
			<td>No:</td>
			<td><input type="text" name="t1"/></td>
		</tr>
		<tr>
			<td>Name:</td>
			<td><input type="text" name="t2"/></td>
		</tr>
		<tr>
			<td>Address:</td>
			<td><input type="text" name="t3"/></td>
		</tr>
		<tr>
			<td><input type="reset" value="reset"/></td>
			<td><input type="submit" value="submit"/></td>
		</tr>
	</table>
	
</form>


web.xml 
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  <servlet>
  	<servlet-name>DBSrv</servlet-name>
  	<servlet-class>com.ihub.www.DBSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>DBSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

DBSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class DBSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw = res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String sno = req.getParameter("t1");
		int no =Integer.parseInt(sno);
		String name =req.getParameter("t2");
		String add = req.getParameter("t3");
		
		//store the data in a database 
		Connection con = null;
		PreparedStatement ps = null;
		int result = 0;
		String qry = null;
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			qry = "insert into student values(?,?,?)";
			ps = con.prepareStatement(qry);
			//set the values 
			ps.setInt(1, no);
			ps.setString(2, name);
			ps.setString(3, add);
			result = ps.executeUpdate();
			if(result==0)
				pw.println("<center><h1>Record Not Inserted</h1></center>");
			else
				pw.println("<center><h1>Record Inserted </h1></center>");
			
			ps.close();
			con.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		pw.close();
	}
}

Request url
----------
	http://localhost:2525/DBApp/




@WebServlet Annotation 
======================
@WebServlet annotation was introduced in Servlet 3.0 version.

@WebServlet annotation is a class level annotation.

It is used to declare and configure a Servlet program within a web application. 

It simplifies the process of defining servlets compared to older methods that required configuring each servlet in the web.xml.



Deployment Directory Structure 
------------------------------
DBApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---DBSrv.java
|---WebContent
	|
	|---form.html 
	|---WEB-INF
		|
		|------web.xml 
		|------lib
			|
			|---ojdbc14.jar
Note:
-----
In above application we need to add "servlet-api.jar" and "ojdbc14.jar" file in project build path.

Copy and paste "ojdbc14.jar" file inside "WEB-INF/lib" folder seperately.


student table 
==============
drop table student;
create table student(sno number(3),sname varchar2(10),sadd varchar2(12));

form.html 
---------

<form action="test" method="GET">
	
	<table align="center">
		<tr>
			<td>No:</td>
			<td><input type="text" name="t1"/></td>
		</tr>
		<tr>
			<td>Name:</td>
			<td><input type="text" name="t2"/></td>
		</tr>
		<tr>
			<td>Address:</td>
			<td><input type="text" name="t3"/></td>
		</tr>
		<tr>
			<td><input type="reset" value="reset"/></td>
			<td><input type="submit" value="submit"/></td>
		</tr>
	</table>
	
</form>


web.xml 
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

DBSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/test")
public class DBSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw = res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String sno = req.getParameter("t1");
		int no =Integer.parseInt(sno);
		String name =req.getParameter("t2");
		String add = req.getParameter("t3");
		
		//store the data in a database 
		Connection con = null;
		PreparedStatement ps = null;
		int result = 0;
		String qry = null;
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			qry = "insert into student values(?,?,?)";
			ps = con.prepareStatement(qry);
			//set the values 
			ps.setInt(1, no);
			ps.setString(2, name);
			ps.setString(3, add);
			result = ps.executeUpdate();
			if(result==0)
				pw.println("<center><h1>Record Not Inserted</h1></center>");
			else
				pw.println("<center><h1>Record Inserted </h1></center>");
			
			ps.close();
			con.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		pw.close();
	}
}




Request url
----------
	http://localhost:2525/DBApp/




Q) What is the difference between GET and POST methodology?

GET Methodology					POST Methodology 
-----------------				----------------
It is a default methodology.			It is not a default methodology.

It carries limited amount of data.		It carries unlimited amount of data.

It sends the request fastly.			It is bit slow.

It is not suitable for secure data.		It is suitable for secure data.

It is not suitable for encryption and 		It is suitable for encryption and file 
file uploading.					uploading.

To process GET methodology we will use 		To process POST methodology we will use 
doGet() method.					doPost() method.



Form Validation
===============
The process of checking pattern and format of form data is called validation and such logic is called form validation logic.

To perform client side form validation we will use javascript.

Deployment Directory Structure 
------------------------------
ValidationApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---TestSrv.java
|---WebContent
	|
	|---form.html 
	|---validation.js
	|---WEB-INF
		|
		|------web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.


































