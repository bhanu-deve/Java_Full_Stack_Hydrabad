ServletConfig object
====================
ServletConfig is an interface which is present in javax.servlet package.

ServletConfig object created by the web container for every servlet.

ServletConfig object is used to read configuration information of a perticular servlet program.

We can use create ServletConfig object by using getServletConfig() method.

ex:
	ServletConfig config = getServletConfig(); 

ServletConfig interface contains following methods.

1) public String getInitParameter(String name)
---------------------------------------
	It returns initialized parameter value based on the parameter name.

2) public Enumeration getInitParameterNames()
----------------------------------------------
	It returns Enumeration of initialized parameters.

3) public String getServletName()
----------------------------------
	It returns servlet name.

4) public ServletContext getServletContext()
--------------------------------------
	It returns ServletContext object

Deployment Directory Structure 
-------------------------------
ConfigApp
|
|----Java Resources
	|
	|----com.ihub.www
		|
		|---TestSrv.java
|----WebContent 
	|
	|---index.html
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.

index.html
----------
<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>

web.xml 
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>


TestSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebInitParam;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet(
			name = "TestSrv",
			urlPatterns = {"/test"},
			initParams = {
							@WebInitParam(name="driver",value="oracle.jdbc.driver.OracleDriver"),
							@WebInitParam(name="url",value="jdbc:oracle:thin:@localhost:1521:XE")
						 }
		)
public class TestSrv extends HttpServlet
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw =res.getWriter();
		res.setContentType("text/html");
		
		ServletConfig config = getServletConfig();
		
		pw.println(config.getInitParameter("driver")+"<br>");
		pw.println(config.getInitParameter("url")+"<br>");
		
		Enumeration e =config.getInitParameterNames();
		while(e.hasMoreElements())
		{
			String s = (String)e.nextElement();
			pw.println(s+"<br>");
		}
		
		pw.println(config.getServletName()+"<br>");
		
		pw.close();
	}
}

Request url
---------
	http://localhost:2525/ConfigApp/





ServletContext object 
=====================
ServletContext is an interface which is present in javax.servlet package.

ServletContext object is created by the web container for every web application.

ServletContext object is used to read configuration information from web.xml file which is global.

We can create ServletContext object by using getServletContext() method.

ex:
	ServletContext context = getServletContext();

	or 

	ServletConfig config = getServletConfig();
	ServletContext context = config.getServletContext();

ServletContext interface contains following methods.

1) public String getInitParameter(String name)
--------------------------------
	It returns initialized parameter value based on parameter name.

2) public Enumeration getInitParameterNames()
----------------------------------------
	It returns Enumeration of initialized parameters.

3) public void setAttribute(String name,Object obj)
------------------------------------------
	It is used to set the attribute to object.

4) public Object getAttribute(String name)
----------------------------------------
	It is used to read the attribute from object.

5) public void removeAttribute(String name)
-------------------------------------------
	It is used to remove the attribute from object.

Deployment Directory Structure 
-------------------------------
ContextApp
|
|----Java Resources
	|
	|----com.ihub.www
		|
		|---TestSrv.java
|----WebContent 
	|
	|---index.html
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.


index.html
----------
<center>
	<h1>
		<a href="test"> click here </a>
	</h1>
</center>

web.xml 
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  <context-param>
  	<param-name>driver</param-name>
  	<param-value>com.mysql.cj.jdbc.Driver</param-value>
  </context-param>
  
  <context-param>
  	<param-name>url</param-name>
  	<param-value>jdbc:mysql://localhost:3306/batch50</param-value>
  </context-param>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv.java
---------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/test")
public class TestSrv extends HttpServlet
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw =res.getWriter();
		res.setContentType("text/html");
		
		ServletContext context = getServletContext();
		
		pw.println(context.getInitParameter("driver")+"<br>");
		pw.println(context.getInitParameter("url")+"<br>");
		
		Enumeration<String> e = context.getInitParameterNames();
		while(e.hasMoreElements())
		{
			String s = e.nextElement();
			pw.println(s+"<br>");
		}
		
		context.setAttribute("username","root");
		context.setAttribute("password", "root");
		
		pw.println(context.getAttribute("username")+"<br>");
		pw.println(context.getAttribute("password")+"<br>");
		
		context.removeAttribute("username");
		context.removeAttribute("password");
		
		pw.close();
	}
}

Request url
----------
	http://localhost:2525/ContextApp/


Servlet Filters 
================
Filter is an object which is executed at the time of preprocessing and postprocessing of the request.

Diagram: servlet7.1

The main objective of Filter is to perform following task.

1) To count number of request coming to the application 

2) To perform validation

3) To perfrom encryption and descryption

Like servlets, Filter having it's own API called Filter API.

A javax.servlet package gives three interfaces of Filter API.

1) Filter  

2) FilterChain

3) FilterConfig 

Deployment Directory Structure 
------------------------------
FilterApp
|
|---Java Resources
	|
	|-----src
		|
		|---com.ihub.www
			|
			|---MyFilter.java
			|---MyServlet.java 
|---WebContent
	|
	|---index.html 
	|
	|---WEB-INF
		|
		|--web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

index.html
---------
<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>

web.xml 
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

MyFilter.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;


@WebFilter("/test")
public class MyFilter implements Filter
{
	@Override
	public void init(FilterConfig config)throws ServletException
	{
		
	}
	
	@Override
	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
			throws IOException, ServletException 
	{
		PrintWriter pw =res.getWriter();
		res.setContentType("text/html");
		
		
		pw.println("<center><h1>Filter Invoked Before </h1></center><br>");
		chain.doFilter(req, res);
		pw.println("<center><h1>Filter Invoked After </h1></center><br>");
		pw.close();
	}
	
	@Override
	public void destroy()
	{
		
	}

}

MyServlet.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/test")
public class MyServlet extends HttpServlet
{
	protected void doGet(HttpServletRequest req, HttpServletResponse res)throws IOException, ServletException 
	{	
		PrintWriter pw =res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Servlet Invoked </h1></center><br>");
	}
}

Request url
----------
	http://localhost:2525/FilterApp/




























































 



		