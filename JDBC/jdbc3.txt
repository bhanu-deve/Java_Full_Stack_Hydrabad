Q) Write a jdbc application to select student record based on student number?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;

public class SelectApp2 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the student no :");
		int no = sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st = con.createStatement();
		
		String qry = "select * from student where sno="+no;
		
		ResultSet rs = st.executeQuery(qry);
		
		int cnt=0;
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
			cnt=1;
		}
		if(cnt==0)
			System.out.println("No Rows Selected");
		
		rs.close();
		st.close();
		con.close();
	}
}

Non-Select Queries 
===================

Q) Write a JDBC application to insert a record into student table ?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class InsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the student no :");
		int no = sc.nextInt();
		
		System.out.println("Enter the student name :");
		String name = sc.next();
		
		System.out.println("Enter the student address :");
		String add = sc.next();
		
		//converting inputs according to sql query 
		name="'"+name+"'";
		add="'"+add+"'";
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st = con.createStatement();
		
		String qry = "insert into student values("+no+","+name+","+add+")";
		
		int result = st.executeUpdate(qry);
		
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println(result+" Record Inserted");
		
		st.close();
		con.close();
	}
}

Q) Write a jdbc application to update student name based on student number?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class UpdateApp
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the student name :");
		String name = sc.next();
		
		System.out.println("Enter the student no :");
		int no = sc.nextInt();
		
		//converting inputs according to SQL query 
		name="'"+name+"'";
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st = con.createStatement();
		
		String qry = "update student set sname="+name+" where sno="+no;
		
		int result = st.executeUpdate(qry);
		
		if(result==0)
			System.out.println("No Record Updated");
		else
			System.out.println(result+" Record Updated");
		
		st.close();
		con.close();
	}
}

Q) Write a jdbc application to delete student record based on student number?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class DeleteApp {

	public static void main(String[] args)throws Exception  
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the student no :");
		int no = sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st = con.createStatement();
		
		String qry = "delete from student where sno="+no;
		
		int result = st.executeUpdate(qry);
		
		if(result==0)
			System.out.println("No Record Deleted");
		else
			System.out.println(result+" Record Deleted");
		
		st.close();
		con.close();
	}

}


Type1 JDBC Driver Architecture / JDBC-ODBC Bridge Driver 
=========================================================
Type1 JDBC driver is not designed to interact with database software directly.

It is designed to take the support of ODBC driver and Vendor DB library to locate and communicate with database software.

Diagram: jdbc3.1

Advantages:

1) Type1 JDBC driver is used to interact with any database software.

2) It is built-in driver of JDK.

Disadvantages:

1) This driver performance is low. It is not suitable for medium and large scale projects. 
   Therefore it is not a industry standard driver.

2) To work with Type1 JDBC driver we need to arrange ODBC driver and Vendor DB library.

3) Since ODBC driver and Vendor DB library present at client side so it is not suitable for 
   untrusted applets to database communication.



Type2 JDBC Driver Architecture / Native API 
============================================
Type2 JDBC driver is not designed to interact with database software directly.

It is designed to take the support of Vendor DB library to locate and interact with database sotware.

Diagram: jdbc3.2

Advantages:

1) Type2 JDBC driver will not take the support of ODBC driver.

2) It gives better performance when compare to Type1 JDBC driver.

Disadvantages:

1) This driver performance is quit slow.It is not suitable for medium and large scale projects.
   Hence it is not a industry standard driver.

2) To work with Type2 JDBC driver we need to arrange vendor db library.

3) Since vendor db library present at client side so it not suitable to perform untrusted 
   applets to database communication.

4) For every database we need to arrange Type2 JDBC driver seperately.




Type4 JDBC Driver Architecture / Native Porotol / Thin Driver 
==============================================================
Type4 JDBC driver is not designed to take the support of ODBC driver and Vendor DB library.

It is designed to communicate with database software directly.

Diagram: jdbc3.2

Advantages:

1) This driver gives better performance compare to Type1 and Type2 JDBC driver.

2) It does not take the support of ODBC driver and Vendor db library.

3) It is developed by using java so it will give platform independency.

4) Since ODBC driver and Vendor DB library not present client side so it is suitable to perform
   untrusted applets to database communication.

5) It is suitable for medium and large scale projects. Hence it is a industry standard driver.

Disadvantages:

1) It is not a built-in driver of JDK.

2) For every database we need to arrange type4 jdbc driver seperately.

JDBC Connection Pool 
====================
It is a factory containing set of readily available JDBC Connection objects before actual being used.

JDBC connection pool represent connecitivity with same database software.

Diagram: jdbc3.4


Advantages:

1) It gives reusable JDBC Connection objects.

2) With minimum number of Connection objects we can interact with muliple clients.

3) A user is not responsible to create,manage and destroy Connection objects. A JDBC Connection
   pool is responsible.















































































































