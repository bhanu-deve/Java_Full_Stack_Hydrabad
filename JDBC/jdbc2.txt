To use any JDBC driver we need to register with DriverManager service.

Every JDBC application contains one built-in service called DriverManager service.



Class.forName()
===============
It is always recommanded to use Class.forName() method to register JDBC driver with DriverManager service.

It is used to load the driver class but won't create an object.

ex:
	Class.forName("driver-class");


Connection object 
==================
Connection is an interface which is present in java.sql package.

It is an object of underlying supplied java class which implements java.sql.Connection (I).

If we want to perform any operation in a database then we need to establish the connection.

Once the work with database is completed we need to close the connection.


DriverManager.getConnection()
=============================
DriverManager is a class which is present in java.sql package.

A static method of DriverManager i.e getConnection() is used to connect with database software and gets one JDBC connection object represent connectivity between java application and database software.

ex:
	Connection con = DriverManager.getConnection("url","username","password");


Statement object 
================
Statement is an interface which is present in java.sql package.

It is an object of underlying supplied java class which implements java.sql.Statement (I).

It acts like a vehicle between java application and database software.

It is used to sends and executes SQL query in database software.

We can create Statement object by using createStatement() of Connection object.
ex:
	Statement st = con.createStatement();


ResultSet object 
================
Every ResultSet contains two positions.

1) BFR (Before First Record/Row)

2) ALR (After Last Record/Row)

By default every record pointer points to BFR position.

Every record ResultSet having 1 as base index and every column of record ResultSet having 1 as base index.

Diagram: jdbc2.1

rs.next()
=========
It is used to move the next position from current position. It returns true if next position contains record and it returns false if next position is ALR.

To read the record ResultSet we need to use getXxx() methods with index numbers or column names.

Here getXxx() methods means getInt(), getString(), getFloat(), getDate() and etc.



Types of Queries in JDBC
=========================
We have two types of queries in JDBC.

1) Select Query 
-----------------
	It gives bunch of records from database software.
	ex:
		select * from student;

	To execute select queries a JDBC Statement object gave executeQuery() method.
	ex:
		ResultSet rs = st.executeQuery("select * from student");

2) Non-Select Query 
-------------------
	It gives numeric value representing number of records effected in a database table.
	ex:
		delete from student; // 3 

	To execute non-select queries a JDBC Statement object gave executeUpdate() method.
	ex:
		int result = st.executeUpdate("delete from student");


Type4 JDBC Driver / Native Protocol  Database properties 
========================================================

1) Driver 	:	oracle.jdbc.driver.OracleDriver 

2) URL 		:	jdbc:oracle:thin:@localhost:1521:XE 

3) Username 	:	system 

4) Password 	:	admin 

Steps to develop JDBC application 
==================================
There are six steps to develop JDBC application.

1) Register JDBC driver with DriverManager service

2) Establish the Connection with Database software 

3) Create Statement object

4) Sends and executes SQL query in database software

5) Gather the result from database software to process the result.

6) Close all JDBC connection objects.


Eclipse 
========

IDE		:	JEE 

Flavours	:	Luna, Indigo, Mars, Kepler and etc.

Environment	:	Java 

Vendor		:	Eclipse Foundation

Website		:	www.eclipse.org

File Format	:	Zip 

Download link	:

https://drive.google.com/file/d/1c8TAX048EjAubIFByqZ0DzWZI3oKuauR/view?usp=drive_link

Steps to develop first JDBC application to read the records from student table 
==============================================================================
step1:
------
	Create a student table with records.
	ex:
		drop table student;
		create table student(sno number(3),sname varchar2(10),sadd varchar2(12));
		insert into student values(101,'raja','hyd');
		insert into student values(102,'ravi','delhi');
		insert into student values(103,'ramana','vizag');
		commit;

step2:
-----
	Launch eclipse ide by choosing workspace location.

step3:
------
	Create a java project i.e IH-JAVA-050.	
	ex:
		File --> new --> Project --> Java Project --> Next --> 
		Name : IH-JAVA-050 --> Next --> Finish.

step4:
-----
	Add "ojdbc14.jar" file in project build path.
	ex:
		right click to IH-JAVA-050 project --> build path --> configure build path 
		--> libraries --> classpath --> Add external jars --> select ojdbc14.jar 
		--> open --> apply and close.
		(C:\oraclexe\app\oracle\product\10.2.0\server\jdbc\lib)	

step5:
------
	Create a "com.ihub.www" package inside "src" folder.


step6:
------
	Create a "SelectApp.java" file inside "com.ihub.www" package.

SelectApp.java
--------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;


public class SelectApp 
{
	public static void main(String[] args) throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		Statement st = con.createStatement();
		
		String qry ="select * from student";
		
		ResultSet rs = st.executeQuery(qry);
		
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.close();
		st.close();
		con.close();
	}
}

step7:
-----
	Run JDBC application.


Assignment
=========
Q) Write a JDBC application to select student name and student address?






































