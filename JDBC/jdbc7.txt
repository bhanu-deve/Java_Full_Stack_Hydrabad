Batch Processing 
================
In batch processing can declare multiple queries in a batch and makes a single call to the database.

To add the query in batch we need to use addBatch() method of Statement object.
ex:
	st.addBatch(query);

To execute the queries in a batch we need to use executeBatch() method of Statement object.
ex:
	int[] result = st.executeBatch();

ex:
----
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessingApp
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st = con.createStatement();
		
		//declare the queries 
		String qry1="insert into student values(104,'ramulu','pune')";
		String qry2="delete from student where sno=103";
		String qry3="update student set sname='rani' where sno=101";
		
		//add each query to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch 
		int[] result = st.executeBatch();
		
		//reading the result
		int sum=0;
		for(int i : result)
		{
			sum+=i;
		}
		
		System.out.println("No of records effected is ="+sum);
		st.close();
		con.close();
	}
}


Transaction Management 
=======================
Transaction means single unit of work.

We commit if transaction done successfully.

We rollback if transaction failed.

Diagram: jdbc7.1

SBI Bank
========
drop table sbi;
create table sbi(accno number(6), accholder varchar2(10), accbal number(8));
insert into sbi values(111111,'ranjan',5000);
insert into sbi values(222222,'ajay',6000);
commit;

KOTAK Bank
==========
drop table kotak;
create table kotak(accno number(6), accholder varchar2(10), accbal number(8));
insert into kotak values(100001,'tanveer',80000);
insert into kotak values(200002,'sakib',90000);
commit;

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class TXNManagementApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the source account no :");
		int sno=sc.nextInt();
		
		System.out.println("Enter the destination account no :");
		int dno=sc.nextInt();
		
		System.out.println("Enter the amount to transfer :");
		int amt = sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		con.setAutoCommit(false);
		
		Statement st = con.createStatement();
		
		String qry1="update kotak set accbal = accbal-"+amt+" where accno="+sno;
		String qry2="update sbi set accbal = accbal+"+amt+" where accno="+dno;
		
		//add each query to batch 
		st.addBatch(qry1);
		st.addBatch(qry2);
		
		//execute the batch 
		int[] result = st.executeBatch();
		
		//for each loop
		boolean flag=true;
		for(int i : result)
		{
			if(i==0)
			{
				flag=false;
				break;
			}
		}
		if(flag==true)
		{
			System.out.println("Transaction Done Successfully");
			con.commit();
		}
		else
		{
			System.out.println("Transaction Failed");
			con.rollback();
		}
		
		st.close();
		con.close();
	}
}

Thin-Client/Fat-Server application 
=================================
Every JDBC application consider as Thin-Client/Fat-Server application.

Diagram: jdbc7.2

To develop thin-client/fat-server application we need to save our business logic and persistence logic in database software in the form of PL/SQL procedures and functions.

To deal with PL/SQL procedures and functions we need to use CallableStatement object.


PL/SQL procedure 
----------------
create or replace procedure first_proc(A IN number,B IN number,C OUT number)
is
begin
C:=A+B;
END;
/

ex:
---
package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallableStmtApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		CallableStatement cst = con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//register out parameters 
		cst.registerOutParameter(3,Types.INTEGER);
		
		//set the in parameters
		cst.setInt(1, 20);
		cst.setInt(2, 30);
		
		//execute 
		cst.execute();
		
		//gather the result 
		int result = cst.getInt(3);
		System.out.println("Sum of two numbers is ="+result);
		
		cst.close();
		con.close();
	}
}
































































