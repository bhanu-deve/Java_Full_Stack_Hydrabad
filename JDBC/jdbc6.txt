ResultSetMetaData
=================
ResultSetMetaData is an interface which is present in java.sql package.

ResultSetMetaData provides metadata of a table.

ResultSetMetaData gives information about number of columns, name of columns, type of columns, size of columns and etc.

We can create ResultSetMetaData object by using getMetaData() method of ResultSet object.
ex:
	ResultSetMetaData rsmd = rs.getMetaData();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;

public class RSMDApp
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st = con.createStatement();
		String qry = "select * from student";
		ResultSet rs = st.executeQuery(qry);
		
		ResultSetMetaData rsmd = rs.getMetaData();
		System.out.println(rsmd.getColumnCount());
		System.out.println(rsmd.getColumnName(1));
		System.out.println(rsmd.getColumnTypeName(2));
		System.out.println(rsmd.getColumnDisplaySize(2));
		rs.close();
		st.close();
		con.close();
	}
}


Working with LOB values
========================
File's are known as LOB's.

We have two types of LOB's.

1) BLOB (Binary Large Object)
----------------------------
	Ex:
		Images, Audio, Video, Avi File and etc.

2) CLOB (Character Large Object)
---------------------------------
	Ex:
		Text file, Advanced Text file and etc.


While dealing with simple Statement object we can't place LOB values directly to query parameter.

To overcome this limitation we need to use PreparedStatement object.

We can place LOB values to query parameter by using following methods.
ex:
	ps.setBinaryStream(-,-,-) / ps.setBLOB(-,-,-)
	ps.setCharacterStream(-,-,-) / ps.setCLOB(-,-,-)


emp2 table 
==========
drop table emp2;
create table emp2(eid number(3),ename varchar2(10),ephoto BLOB);


PhotoInsertApp.java
-------------------
package com.ihub.www;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PhotoInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the employee id :");
		int id = sc.nextInt();
		
		System.out.println("Enter the employee name  :");
		String name = sc.next();
		
		// locate a file 
		File f = new File("src/com/ihub/www/james.jpg");
		FileInputStream fis = new FileInputStream(f);
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con  = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry = "insert into emp2 values(?,?,?)";
		
		PreparedStatement ps = con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1, id);
		ps.setString(2, name);
		ps.setBinaryStream(3, fis,(int)f.length());
		
		//execute 
		int result = ps.executeUpdate();
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println("Record Inserted");
		
		ps.close();
		con.close();
	}
}


PhotoRetrieveApp.java
----------------------
package com.ihub.www;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class PhotoRetrieveApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con  = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st = con.createStatement();
		String qry = "select * from emp2";
		ResultSet rs = st.executeQuery(qry);
		while(rs.next())
		{
			FileOutputStream fos = new FileOutputStream("D:\\ayan.png");
			
			InputStream is = rs.getBinaryStream(3);
			
			int byteReads = 0;
			byte[] buff = new byte[250];
			
			while((byteReads=is.read(buff))!=-1)
			{
				fos.write(buff, 0, byteReads);
			}
			fos.close();
		}
		System.out.println("Please check the location");
		rs.close();
		st.close();
		con.close();
	}
}

JDBC Flexible Application 
=========================
In JDBC , Connection object consider as heavy weight object. It is never recommanded to create Connection object in every JDBC application. We need to create a seperate class which returns JDBC Connection object.

DBConnection.java
-----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection 
{
	static Connection con = null;
	
	private DBConnection()
	{
	}
	
	//static method 
	public static Connection getConnection()
	{
		try
		{
			if(con == null)
			{
				Class.forName("oracle.jdbc.driver.OracleDriver");
				con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return con;
	}
}


FlexibleApp.java
----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class FlexibleApp 
{
	public static void main(String[] args)throws Exception  
	{
		Connection con = DBConnection.getConnection();
		Statement st = con.createStatement();
		String qry  = "select * from student";
		ResultSet rs = st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}


Working with properties file 
============================
In regular intervals, our DBA will change username and password.

It is never recommanded to keep all database properties directly to the application.

It is always recommanded to read database properties from properties file.

A properties file contains key and value pair.

dbdetails.properties
--------------------
driver= oracle.jdbc.driver.OracleDriver
url= jdbc:oracle:thin:@localhost:1521:XE
username=system
password=admin 


PropertiesFileApp.java
-----------------------
package com.ihub.www;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public class PropertiesFileApp 
{
	public static void main(String[] args)throws Exception  
	{
		//locate properties file 
		FileInputStream fis = new FileInputStream("src/com/ihub/www/dbdetails.properties");
		
		//create a Properties class object
		Properties p = new Properties();
		
		//load the data from file to class
		p.load(fis);
		
		//read the data from class
		String s1 = p.getProperty("driver");
		String s2 = p.getProperty("url");
		String s3 = p.getProperty("username");
		String s4 = p.getProperty("password");
		
		Class.forName(s1);
		Connection con = DriverManager.getConnection(s2,s3,s4);
		Statement st = con.createStatement();
		String qry = "select * from student order by sno desc";
		ResultSet rs = st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}
























































































